---
title: "Practical 5: Files"
subtitle: "BIO511 Genomics - Python File Manipulation and Command Line Arguments"
author: "Alvar Almstedt, Emma Västerviga"
date: today
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: false
    theme: cosmo
---

# Introduction

Todays topics include: Reading and writing to files, working with pandas dataframes and some of the functionality in biopython

# Useful links

[Files (text)](https://www.geeksforgeeks.org/python/file-handling-python/)

[Files (video)](https://www.youtube.com/watch?v=Uh2ebFW8OYM)

[Pandas tutorial](https://www.w3schools.com/python/pandas/default.asp)

[Biopython (text tutorial)](https://biopython.org/docs/latest/Tutorial/index.html)

[Biopython (video)](https://www.youtube.com/watch?v=ocA2IMe7dpA)



# Exercises

## 

**File Manipulation**

Create a script that:

a. Uses with open() to create a csv file with 5 rows and 5 columns. Make sure to save the file and use comma as the separator.

b. Appends a row to the file based on the users input, using argv.

##

**Arguments and pandas**

a. Create a second script that takes the file you created in the previous task as a user defined input argument. Use argparse for this.

b. Make sure to add useful help messages to the arguments in your script.

c. use the csv module to read the csv file you created

d. Convert the data to a pandas dataframe. Print a statistical summary of your data.

## 


```python
"""
Biopython Exercise — Mini FASTA toolkit with Biopython (Seq, SeqRecord, SeqIO)

Remember that you can copy these commented code blocks into your script to not have to refer back to your browser window

Step 0 — Create the input file:
Save the text below as a file named `dna.fasta` in the same folder as your script:

>seq1
ATGCATGCATGCATGCATGCATGCATGC
>seq2
GATTACAGATTACAGATTACA
>seq3
CGCGATATCGCGATATCGCGATATCGCGATATCGCGATATC
>seq4
TTTAAACCCGGGTTTAAA
>seq5
GCCGCGGCGCGCCGCGGCGCGCCGCGGCGC
>seq6
ATATATATATATATATATATAT
>seq7
ACGTTGCAACGTTGCAACGTTGCAACGTTGCA
>seq8
CATGACTGACTGATGCTAGCTAGCTGATCGTACGATC
"""
```

###
```python
# A) Load and report (use SeqIO)

# - Read all records from `dna.fasta`.
# - For each record, print the record ID and the sequence length.
# - Also print the first 10 bases of the sequence.
```

###
```python
# B) Reverse complements to a new FASTA (use Seq, SeqRecord, SeqIO)

# - For each original record, create the reverse complement of its sequence.
# - Make a new SeqRecord for the reverse complement.
# - Set the new ID to "<oldid>_rc" and the description to "reverse complement of <oldid>".
# - Write all reverse-complement records to a file named `dna_rc.fasta`.
```

###
```python
# C) GC% annotation to a new FASTA (use SeqRecord, SeqIO)

# - For each original record, calculate GC% = 100 * (count of 'G' + count of 'C') / length.
# - Round to 1 decimal place.
# - Create a copy of the record where the description includes "GC=<value>%".
# - Write these annotated records to `dna_with_gc.fasta`.
```

###
```python
# D) Translation (Optional, do if you have extra time)

# - Translate each DNA sequence and print the first 10 amino acids.
# - Read `dna_rc.fasta` back in and confirm IDs/descriptions look correct.
```

