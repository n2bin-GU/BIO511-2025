---
title: "Practical 0: Introduction"
subtitle: "BIO511 Genomics - Python Introduction and Setup"
author: "Alvar Almstedt, Emma Västerviga"
date: today
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: false
    theme: cosmo
---

# Introduction to Python
Welcome!!

The exercises for this first lesson are meant to connect the python part of the course to what you have previously done in the unix shell scripting part of the course and are meant to be done in the terminal (not jupyter). You can start using jupyter after today.

If you think there is a lot of new syntax, dont worry. We will begin explaning the python syntax from the ground up starting tomorrow.

## Some useful links
[Jupyter notebooks (text)](https://www.datacamp.com/tutorial/tutorial-jupyter-notebook)

[Jupyter notebooks (video)](https://www.youtube.com/watch?v=HW29067qVWk)


# Exercises


We are going to use github repos to present and compare each assignment within groups.
Create a github repo for this course. Name it `BIO511_python_2025_<My-Name>`. Create a folder for the first assignment in your new git repo and push your solutions for the next exercise below. This should allow you to easily show the rest of the group what you did tomorrow.

Let’s start exploring Python! Some of the terms and tools used below we will go through in greater detail later on in the course. For now, let’s just try them out. 

## The print command and your first script

To print any string, in this case hello, you can use the following line of code in python:
```python
print("hello!")
```
- Try to create a script that prints a message using the command above
Open a file called `my_python_script.py`. You can name it anything, just make sure it has the extension `.py`. Add a print command like the one above to print any string of text.
- Save the file and find it in the terminal.
Run your script using the following command in bash: 
```python
python my_python_script.py
```
Any line starting with a hash `#` will be interpreted as a comment by python. A reasonable comment to the print command above could look something like this: `# Print "Hello"`. 
- Try adding a comment to your script as well.

## Check your python version

You can check your python version by typing `python -V` in the terminal. Another useful argument is `-h`, which allows you to see what available options there are. Try it out by typing `python -h` in your terminal. 

# Bash commands

You already had an introduction to bash. Did you know you can run bash commands in python as well? 

Open a python session by typing `python` in your terminal. To exit python, you’ll just have to type `quit()`. 

Let’s open python and try out some commands. A typical python module that you can use to perform the following commands is called `os`. First we have to import it in the python session to allow us to use the various tools provided by `os`. Start by opening a python session. Then, try out the following commands:
```python
import os
```
In bash we would write pwd to print the current working directory. In python it's:
```python
os.getcwd()
```
Create a new directory in the one you're in right now
```python
os.mkdir("test_dir_from_python")
```
Create a subrdirectory in the one you just created
```python
os.mkdir("test_dir_from_python/subdir1")
```
You can create a new directory with a subdirectory in one line of code should you use the function makedirs() instead
```python
os.makedirs("test_dir_from_python/subdir2/subdir2.1")
```
What happens if you try to create the directories you just made again? Try it out.


Should you want to create a directory that might already exist without getting an error message, just to create it if it doesn't exist and otherwise do nothing, you can use the command `os.makedirs()` with an input argument especially made for cases like these, called exist_true. `exist_ok` is set to `False` by default so we need to set it to `True` like this:
```python
os.makedirs("test_dir_from_python/subdir2/", exist_ok=True)
```
To list the contents of a directory, use `os.listdir()`. To have a look inside the directory we just made, run:
```python
os.listdir("test_dir_from_python")
```
Try to list the contents of the subdirectories `subdir1` and `subdir2` as well.

## basename

When coding we often work with file paths. However, we want to avoid hardcoding any path. Usually, we write scripts where we allow the user to set any path they want. Let’s say we’re working on a script where the user can specify their own input file path.

Start by moving the file `my_python_script.py` to one of the subdirectories you created, by using `os.rename()`:
```python
os.rename("/path/to/my_python_script.py", "test_dir_from_python/subdir1/my_python_script.py")
```
We can use a function called `basename` to work with any path we’re given. The `basename` function comes from a submodule within `os` called `path`. You can get only the file name from an entire path like this:
```python
# Save the path to a variable called my_file_path
my_file_path = 'test_dir_from_python/subdir2/my_python_script.py'
# Get only the file name
os.path.basename(my_file_path)
````

## arguments

But how can we allow any user of a script to specify their own path? We allow them to specify it when running the script from the terminal, to avoid them going in and messing with the actual script.

Now we are going to import a module called `sys`. Then, we will use a function from `sys` called `argv` to allow us to work with the command line argument that the user will give. Open up a new python script named `input_arguments_test.py`, preferably in `test_dir_from_python/subdir2/`, to allow us to work in the same directories. Write the following code in your file:
```python
import sys
# use the first and only argument from the user and save it as "input_string"
input_string = sys.argv[1]

# print the input argument
print(input_string)
```
Save the file and try to run it from the terminal. This time we should give an input argument, something it could print. Run it like this:
```python
python test_dir_from_python/subdir2/input_arguments_test.py "This is a test string"
```
Finally, we will combine what we’ve gone through so far. Create a script with and input argument that is a path to one of your files. Make the script print the basename of the file.


