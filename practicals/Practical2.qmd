
---
title: "Command‑Line Essentials"
author: "Instructor: Stuti"
format:
  html:
    theme: cosmo
    toc: true
    toc-depth: 3
    smooth-scroll: true
    code-copy: true
    code-overflow: wrap
    link-external-newwindow: true
number-sections: true
fontsize: 1.06em
execute:
  echo: false
  warning: false
  message: false
---

::: callout-note
### How to use this handout
This guide is **self‑explanatory** and written for true beginners.  
Every command is followed by a **plain‑language explanation** (in blue/green callouts) and a short note on **when you’d use it in bioinformatics**.  
No prior Linux/Unix experience is assumed.
:::

## Why the command line for bioinformatics?

- **Scale:** FASTA/FASTQ/BAM/VCF can be huge and numerous—GUIs do not scale.  
- **Reproducibility:** Commands are text, so analyses are easy to repeat and share.  
- **Portability:** Works the same on laptops and HPC clusters.

::: callout-tip
### Mental model
Think of CLI tools as **LEGO bricks**. Each command does one small job well.  
You **snap** bricks together with pipes `|` to build powerful analyses.
:::

---

## Workspace Setup (your “lab bench” on disk)

### Create a clean project layout
```bash
mkdir -p ~/projects/hpylori_project/{data,scripts,results,logs,refs,notebooks,tmp,backup}
cd ~/projects/hpylori_project
ls -1
```
::: callout-note
### Explanation
- `mkdir -p` creates **all listed folders** in one go—even if parents don’t exist yet.  
- We separate **raw data**, **scripts**, **results**, and **logs** so we never overwrite original data and can re‑run analyses cleanly.  
- `ls -1` lists one item per line for quick scanning.
**When used:** At the start of **every** new project to enforce reproducible structure.
:::

::: callout-tip
### Naming conventions
Use **kebab‑case** (`raw-data/`) or **snake_case** (`raw_data/`) for directories and files.  
Avoid spaces; prefix with dates if helpful: `2025-08-28_qc-report.tsv`.
:::

### Add a tiny dataset for practice
```bash
printf "sample_id\tcountry\tcondition\nS1\tSE\tcase\nS2\tIN\tcontrol\nS3\tSE\tcase\nS4\tKE\tcontrol\n" > metadata.tsv
head metadata.tsv
```
::: callout-note
### Explanation
- `printf` writes a **small, deterministic** TSV so everyone gets identical results.  
- `head` shows the first few lines so we can **peek** without opening an editor.
**When used:** Demo/teaching, testing pipelines quickly before running on big data.
:::

---

## Links: Hard link vs Symbolic link (symlink)

### What is a link?
A link references a file **without copying** the data.

| Property | **Hard link** | **Symlink** |
|---|---|---|
| Points to | File **data** (same inode) | **Path** (shortcut) |
| If original is deleted | Data still accessible | Link **breaks** |
| Cross filesystems? | ❌ No | ✅ Yes |
| Link directories? | ❌ Usually no | ✅ Yes |
| Create with | `ln file linkname` | `ln -s target linkname` |

::: callout-note
### Intuition
- **Hard link** = the same book with two covers (two names, one content).  
- **Symlink** = a bookmark pointing to a book on a shelf (if the book moves, the bookmark breaks).
**When used:** Symlinks are preferred for **shared references and large datasets**.
:::

### Create and inspect a symlink
```bash
mkdir -p ~/shared_refs
echo ">chr1\nACGTACGTACGT" > ~/shared_refs/genome.fa

mkdir -p refs
ln -s ~/shared_refs/genome.fa ./refs/genome.fa
ls -l refs
```
::: callout-note
### Explanation
- We **simulate** a shared reference outside the project (`~/shared_refs`).  
- `ln -s` makes a symlink **inside** the project pointing to that reference.  
- `ls -l` shows the arrow `genome.fa -> /home/.../genome.fa`, confirming it’s a link.
**When used:** Keep **one source of truth** for references; link them into each project.
:::

### Relative vs absolute symlinks
```bash
ln -s ../shared_refs/genome.fa refs/genome.fa   # relative path (portable inside repos)
```
::: callout-tip
### Why relative?
Relative links survive **moving or cloning** the project to a new location, making your project more portable.
:::

---

## Finding & Searching Files/Data

### `find` — locate files by name/type/size
```bash
find . -name "*.tsv"
find . -type f -size +1M
find . -maxdepth 2 -type d
```
::: callout-note
### Explanation
- `-name "*.tsv"` match by pattern; quotes prevent the shell from expanding `*`.  
- `-type f` (files) or `-type d` (directories).  
- `-size +1M` files **bigger than** 1 MB.  
- `-maxdepth 2` restricts how deep we search.
**When used:** Quickly find **all results**, **all FASTQs**, or **big files** in a tree.
:::

### Peek safely at contents
```bash
head -n 5 metadata.tsv
less metadata.tsv     # press q to quit
```
::: callout-note
### Explanation
- `head` shows the top N lines; `less` lets you **scroll** without loading the whole file into memory.
**When used:** Before processing, to confirm format and columns.
:::

### `grep` — search inside files
```bash
grep -i "gene" data/annotation.gff
grep -c "^>" data/sequences.fa
```
::: callout-note
### Explanation
- `-i` ignores case.  
- `^` anchors to **start of line**; FASTA headers start with `>` so `grep -c "^>"` counts sequences.
**When used:** Find **genes of interest**, **samples**, **headers**, **errors** in logs.
:::

### `wc` — counts (lines/words/chars)
```bash
wc -l metadata.tsv
```
::: callout-note
### Explanation
`wc` = word count. `-l` counts **lines** (often **rows** in a table).  
**When used:** Quick sanity checks (how many reads/samples/variants?). 
:::

### `cut`, `sort`, `uniq` — frequency tables
```bash
cut -f2 metadata.tsv | sort | uniq -c | sort -nr
```
::: callout-note
### Explanation
- `cut -f2` extracts **column 2** (tab‑separated by default).  
- `sort` groups identical values together.  
- `uniq -c` counts occurrences (works on adjacent duplicates → sort first).  
- Final `sort -nr` orders by **numeric** count, **descending**.
**When used:** Count **countries**, **barcodes**, **gene names**, **sample groups**.
:::

---

## Pipes & Redirection (connect the bricks)

### Pipes `|` — send output to the next command
```bash
grep -w "SE" metadata.tsv | wc -l
```
::: callout-note
### Explanation
The **output** of `grep` becomes the **input** of `wc`.  
This counts how many rows exactly match the word `SE`.
**When used:** Build end‑to‑end analyses without intermediate files.
:::

### Redirection `>` / `>>` / `2>`
```bash
cut -f2 metadata.tsv | sort | uniq -c | sort -nr > results/country_counts.txt
head results/country_counts.txt
```
::: callout-note
### Explanation
- `>` **overwrites** a file with the command’s output.  
- `>>` **appends** to an existing file.  
- `2>` writes **errors** (stderr) to a file (useful for logging).  
**When used:** Save reports, summaries, and logs for later review.
:::

---

## File Permissions & `chmod` (make scripts runnable; protect data)

### Understand `ls -l` and permission bits
```bash
ls -l script.sh
# -rw-r--r--  1 stuti staff  1024 Aug 28 10:12 script.sh
```
::: callout-note
### Explanation
- Positions show **owner**, **group**, **others** permissions (`r` read, `w` write, `x` execute).  
- Here the owner can read/write; group/others can read.
**When used:** Diagnose “Permission denied” and set correct access.
:::

### Set permissions: symbolic and numeric modes
```bash
chmod +x script.sh            # add execute bit (now runnable with ./script.sh)
chmod 644 report.txt          # u=rw, g=r, o=r  (common for text files)
chmod 755 pipeline.sh         # u=rwx, g=rx, o=rx (common for shared tools)
chmod 444 data/raw.fastq.gz   # read‑only for all (protect raw data)
```
::: callout-note
### Explanation
- `+x` grants execute.  
- Numeric: add `r=4`, `w=2`, `x=1` → owner/group/others.  
- `644` text files; `755` tools; `444` immutable raw data.
**When used:** Make **scripts executable**, protect **raw FASTQ**, share **team tools**.
:::

### Quick troubleshooting
```bash
# Is it executable?
ls -l script.sh

# Can I write here?
ls -ld .
```
::: callout-tip
### Tips
- If a script won’t run, check for the `x` bit and the **shebang** (`#!/usr/bin/env bash`) at the top.  
- On shared HPC directories, ensure the **group** has the right permissions.
:::

---

## Local vs HPC (what changes, what stays the same)

| Feature | Laptop/Desktop | HPC Cluster |
|---|---|---|
| Access | GUI + Terminal | SSH (terminal) |
| Storage | Local disk | Shared project space (`/proj/...`), scratch |
| Compute | 1–8 cores | Many nodes/cores; batch scheduler |
| Data | Smaller, local | Larger, shared → **symlink** into projects |

### Typical HPC locations
```text
/home/username     # your private space (small)
/proj/<project>    # shared project data (primary home for big data)
/scratch           # fast temporary I/O space during jobs
```
::: callout-note
### Explanation
- Keep references and large reads in `/proj/...`; symlink into your project.  
- Use `/scratch` for **temporary** heavy I/O; clean up after jobs.
**When used:** Day‑to‑day HPC work mirrors local workflows but on shared paths.
:::

### Copy & verify (concepts are identical locally)
```bash
# Copy a file to HPC
scp metadata.tsv user@hpc.example.org:/home/user/

# Sync a directory (only changes) to shared project space
rsync -avh results/ user@hpc.example.org:/proj/course/results/

# Verify integrity (run on both ends and compare)
md5sum metadata.tsv
```
::: callout-tip
### Tips
- Prefer `rsync` for repeated updates (only diffs transfer).  
- Use `md5sum` (or `sha256sum`) to confirm files are intact after transfer.
:::

---

## Guided Practice (copy/paste friendly)

### Build the workspace and simulate data
```bash
mkdir -p project/{data,scripts,results,logs,refs}
printf "sample_id\tcountry\nS1\tSE\nS2\tIN\nS3\tSE\n" > project/metadata.tsv
```

::: callout-note
### Explanation
We create a small, consistent dataset so everyone’s outputs match during exercises.
**Goal:** Reduce friction, focus on learning the commands.
:::

### Link a shared reference
```bash
mkdir -p ~/shared_refs && echo ">chr1\nACGT" > ~/shared_refs/genome.fa
ln -s ~/shared_refs/genome.fa project/refs/genome.fa
ls -l project/refs
```

::: callout-note
### Explanation
Confirms the link with `ls -l` (look for the arrow).  
**Goal:** Practice the habit of linking large shared data instead of copying.
:::

### Answer questions with pipelines
```bash
cut -f2 project/metadata.tsv | sort | uniq -c | sort -nr > project/results/country_counts.txt
grep -c "^>" project/refs/genome.fa
```
::: callout-note
### Explanation
We create a frequency table and count FASTA sequences with a one‑liner—exactly the kind of small, fast checks you’ll do every day.
:::

### Permissions in context
```bash
chmod 444 project/data/*.fastq.gz    # protect raw data
chmod +x project/scripts/qc.sh       # make a pipeline script executable
```
::: callout-note
### Explanation
Lock raw files to **prevent accidents**; make scripts runnable so you can **execute** your pipeline with `./scripts/qc.sh`.
:::

---

## Self‑check (mini‑quiz)

1. In one sentence, why are **symlinks** preferred for references on HPC?  
2. What does `chmod 755` do, and when would you use it?  
3. Write a one‑liner to count unique **countries** in `metadata.tsv`.  
4. What’s the difference between `>` and `>>`? Between `>` and `|`?  
5. Find all `.tsv` files larger than 1 MB and save the list to `big_tsvs.txt`.

::: callout-important
### Hint
Try to answer in **plain language** first (“what problem does this solve?”), then write the command.
:::
