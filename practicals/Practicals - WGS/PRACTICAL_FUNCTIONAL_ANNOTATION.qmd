---
title: "Practical 3: Functional Annotation of Whole Genomes"
subtitle: "BIO511 Genomics - Genome annotation in Prokka"
author: "Tor Kling"
date: today
format:
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: false
    theme: cosmo
---

# Introduction

Annotation is the process of taking assembled genome sequences (or in some cases unassembled sequences) and identifying genomic features such as genes, coding sequences (CDS), tRNAs, rRNAs, and other functional elements. This is a critical step in guiding deeper analysis, as the annotated genes become guidemarks for functional identification and characterizing phenotypes. It is also typically the first step before more advanced downstream analysis after we've finished assembly and polishing. With annotated genomes, we can perform comparative genomics, functional profiling, and pangenome analyses.

::: {.callout-important}
## REMEMBER: Create a separate project folder
```bash
# Remember to make separate project folders for this practical
# How you structure your workspace is up to you, but make sure to adjust the paths in the scripts below accordingly
# EXAMPLE:
mkdir -p ~yourdir/bio511/practical_2

# Symlink the data folder to your project directory
ln -s /cephyr/NOBACKUP/groups/n2bin_gu/BIO511/data ./data

# Or if you need to use the data locally, copy it
scp -r CID@vera2.c3se.chalmers.se:/cephyr/NOBACKUP/groups/n2bin_gu/BIO511/data ./data
```
:::

::: {.callout-note}
## Learning Objectives
By the end you should be able to:

- Run Prokka to annotate prokaryotic genomes
- Provide curated reference fasta-files to improve annotation quality
- Use MultiQC to aggregate and compare annotation outputs
- Perform basic inspection of annotation results using command-line tools and MultiQC

:::
---

# Prokka Annotation
While BAKTA might be a more preferred option for many nowadays, Prokka remains a widely used and well-established tool for prokaryotic genome annotation. It is useful for its speed, ease of use, and ability to produce standardized output formats that are compatible with many downstream analysis tools. Prokka is also a bit more streamlined that BAKTA, with a lighter database, making it suitable for more custom annotation workflows.

## Basic/agnostic Prokka annotation
For the first run, we'll perform a basic annotation using Prokka's default settings. This will give us a general overview of the genome's features using the built-in databases.

```bash
#!/bin/bash
#SBATCH -A C3SE408-25-2 
#SBATCH -J prokka_baseline
#SBATCH -p vera
#SBATCH -N 1 --cpus-per-task=8
#SBATCH -t 01:00:00
#SBATCH --output=/cephyr/users/youruser/Vera/practical_3/logs/prokka_baseline_%j.out # output log, adjust path to where you want to save logs
#SBATCH --error=/cephyr/users/youruser/Vera/practical_3/logs/prokka_baseline_%j.err # error log, adjust path to where you want to save logs

# Set paths - ADJUST THESE TO YOUR ACTUAL PATHS
CONTAINER_PATH="/cephyr/NOBACKUP/groups/n2bin_gu/BIO511/singularity_images/prokka.sif"
RESULTS_PATH="/cephyr/NOBACKUP/groups/n2bin_gu/students/yourname/practical_3"
ASSEMBLIES_DIR="/cephyr/NOBACKUP/groups/n2bin_gu/BIO511/data/assemblies"
OUTPUT_DIR="${RESULTS_PATH}/annotation/prokka_baseline"

# Bind paths for container
export SINGULARITY_BINDPATH="${ASSEMBLIES_DIR}:/assemblies,${RESULTS_PATH}:/results"

# Create output directories
# If needed: mkdir -p ${RESULTS_PATH}
mkdir -p ${OUTPUT_DIR}

# Input assembly
ASSEMBLY="/assemblies/GU10.fa"

# Set a prefix variable for naming outputs
PREFIX="$(basename ${ASSEMBLY} .fa)_baseline"

# Run Prokka (baseline)
singularity exec ${CONTAINER_PATH} prokka \
  --cpus 8 \
  --outdir /results/annotation/prokka_baseline \
  --prefix ${PREFIX} \
  --locustag BIO511 \
  --genus Escherichia \
  --species coli \
  ${ASSEMBLY}

echo "Baseline Prokka annotation completed"
```

---

## Prokka with curated proteins

For the second run, we'll enhance the annotation by providing Prokka with a curated set of reference proteins. This can help improve the accuracy of gene predictions and functional annotations, The curated proteins used for this ref are a collection of reference genomes for *E. coli* from NCBI RefSeq, which have been manually reviewed and merged. Using these curated proteins can help reduce the number of hypothetical proteins and improve the functional annotations of genes in our genome.

Strains:

- *Escherichia coli* K-12 MG1655 (GCF_000005845.2)
- *Escherichia coli* O157:H7 str. Sakai (GCF_000008865.2)
- *Escherichia coli* ATCC 25922 (GCF_000401755.1)
- *Escherichia coli* O25b:H4-ST131 (GCF_024918415.1)

```bash
#!/bin/bash
#SBATCH -A C3SE408-25-2
#SBATCH -J prokka_curated
#SBATCH -p vera
#SBATCH -N 1 --cpus-per-task=8
#SBATCH -t 01:00:00
#SBATCH --output=/cephyr/users/youruser/Vera/practical_3/logs/prokka_curated_%j.out # output log, adjust path to where you want to save logs
#SBATCH --error=/cephyr/users/youruser/Vera/practical_3/logs/prokka_curated_%j.err # error log, adjust path to where you want to save logs

# Set paths - ADJUST THESE TO YOUR ACTUAL PATHS
CONTAINER_PATH="/cephyr/NOBACKUP/groups/n2bin_gu/BIO511/singularity_images/prokka.sif"
RESULTS_PATH="/cephyr/NOBACKUP/groups/n2bin_gu/students/yourname/practical_3"
ASSEMBLIES_DIR="/cephyr/NOBACKUP/groups/n2bin_gu/BIO511/data/assemblies"
CURATED_PROTEINS="/cephyr/NOBACKUP/groups/n2bin_gu/BIO511/data/curated_refs/curatedRef.faa"
OUTPUT_DIR="${RESULTS_PATH}/annotation/prokka_curated"

# Bind paths for container
export SINGULARITY_BINDPATH="${ASSEMBLIES_DIR}:/assemblies,${RESULTS_PATH}:/results,${CURATED_PROTEINS}:/curatedRef.faa"

# Create output directories
mkdir -p ${OUTPUT_DIR}

# Input assembly
ASSEMBLY="/assemblies/GU10.fa"

# Set a prefix variable for naming outputs
PREFIX="$(basename ${ASSEMBLY} .fa)_curated"

# Run Prokka (curated)
singularity exec ${CONTAINER_PATH} prokka \
  --cpus 8 \
  --outdir /results/annotation/prokka_curated \
  --prefix ${PREFIX} \
  --locustag BIO511 \
  --genus Escherichia \
  --species coli \
  --proteins /curatedRef.faa \
  ${ASSEMBLY}

echo "Curated Prokka annotation completed"
```

Submit jobs and monitor:

```bash
sbatch prokka_baseline_job.slurm
sbatch prokka_curated_job.slurm
squeue -u $USER
```

---

# Inspecting outputs

By now you guys are multiQC pros, so let's use MultiQC to aggregate and compare the outputs from both Prokka runs. First download the data from the HPC and set up a local project folder for the MultiQC analysis.

## Prepare inputs for MultiQC
```bash
# Create a directory to collect Prokka outputs
mkdir -p multiqc_analysis/prokka

# Copy Prokka result folders
scp -r CID@vera2.c3se.chalmers.se:/cephyr/NOBACKUP/groups/n2bin_gu/students/yourname/practical_3/annotation/prokka_baseline ./multiqc_analysis/prokka/
scp -r CID@vera2.c3se.chalmers.se:/cephyr/NOBACKUP/groups/n2bin_gu/students/yourname/practical_3/annotation/prokka_curated ./multiqc_analysis/prokka/
```

## Run MultiQC
```bash
cd multiqc_analysis

multiqc . \
  --title "BIO511 Practical 3 - Prokka Annotation" \
  --filename "practical3_prokka_report" \
  --dirs \
  --dirs-depth 2 \
  --force
```

## Review Questions

Open the HTML report and review the Prokka section comparing baseline vs curated. Use this report, manual data observation and any other relevant methods to answer the questions below:

1. How many CDS, tRNA, and rRNA features were called in each run? Why dont we see a difference?
2. How many hypothetical proteins in baseline vs curated? What changed? (hint: Remember a certain script you made to look up a certain pattern in ffn files? or could you use grep or awk?)
3. Which genes had improved product names with curated proteins? Name some examples. (hint: Open and look at the .tsv files)
4. What additional curated sets could you add for better annotations?

---

# Optional: Prepare for downstream tools

As we mentioned in the beginning, annotated genomes are often used as inputs for various downstream analyses. Depending on your research goals, you might want to prepare the Prokka outputs in gathered structures, here is an example script to organize the outputs into separate folders based on file type.

Common follow-ups analyses include these file types:

- GFF for pangenome/roary-like workflows
- FAA for functional analysis and KO/COG assignments

Script to organize outputs (can be run locally or on HPC, adjust paths accordingly):
```bash
#!/bin/bash
set -e
set -u
set -o pipefail

# Set paths 
INPUT_PATH=/path/to/your/prokka/results # Adjust to where your Prokka results are
OUTPUT_PATH=/path/to/sorted/outputs # Adjust to where you want sorted outputs

# Make the sorted output dirs
mkdir -p ${OUTPUT_PATH}/gff ${OUTPUT_PATH}/faa ${OUTPUT_PATH}/gbk ${OUTPUT_PATH}/ffn 

# Iterate over file types and use find to locate and copy files
for filetype in gff faa gbk ffn; do
  find ${INPUT_PATH} -name "*.${filetype}" -exec cp {} ${OUTPUT_PATH}/${filetype}/ \;

  echo "Copied ${filetype} files to ${OUTPUT_PATH}/${filetype}/" && ls -lh ${OUTPUT_PATH}/${filetype}/
done

echo "Sorted Prokka outputs into ${OUTPUT_PATH}"
```

---

::: {.callout-note}
## Key Takeaways

- Prokka provides fast, reproducible prokaryotic genome annotation
- Seeding with curated proteins improves naming and reduces hypothetical calls
- MultiQC makes it easy to compare runs and summarize results across outputs, however you should always manually inspect results as well and create your own workflows for specific questions
- Keep paths consistent and bind assemblies, results, and any curated inputs when using containers on HPC

:::
