---
title: "Practical 1: Introduction to Command Line Interface"
subtitle: "BIO511 Genomics - Command Line Basics"
author: "Tor Kling, Stuti Jain"
date: today
format: 
  html:
    toc: true
    toc-depth: 3
    number-sections: true
    code-fold: false
    theme: cosmo
---

# Introduction

Doing bioinformatics often necessitates the handling of very large files, with complex structure and dense matrices. This makes them often unwieldy to pretty much impossible to handle in traditional GUI-based analysis tools (such as Excel), and as such we rely on original and lightweight file handling systems such as bash-based command line enviroments that allow us to interact with our computer on a more fundamental level. 

Typically the first thing you encounter on opening a new terminal instance is: 
```bash
user@computer:~$
```
This is the terminal prompt where you'll be able to issue commands to the computer, with the *syntax* ("grammar" of the code) of your command prompts often using the following structure: 
```bash
user@computer:-$ command -option my_object

# or you may have more advanced command prompts

user@computer:-$ command -threads 2 -output $My_Directory_Variable/ -prefix New_file_ -accessoryfile Additional_file my_object | nextcommand -cvfz New_file_my_object.tar.gz

```
Imagination (and resources, time complexity, optimization...) sets the limit of what you can do in the CLI

If you're further curious on the [history](https://www.freecodecamp.org/news/the-command-line-1fdbc692b3bf/) of shell and the command line.

::: {.callout-note}
## Learning Objectives

By the end of this practical, you should be able to:

- Navigate the file system using `cd` and `ls`
- Create and manipulate directories with `mkdir`
- Create, copy, move, and delete files using `touch`, `cp`, `mv`, and `rm`
- View file contents using `cat`, `head`, and `tail`
- Search within files using `grep`
- Display text using `echo`
- Tie these commands together using `pipes`  
:::

---

# Making, Navigating and finding things in your directories

## Understanding Your Location (`pwd` and `ls`)
Before we start creating new things in our directory its a good idea to get a grip on your whereabouts within the working directory

- `pwd`: Print working directory - shows your current location
- `ls`: List contents of directories

**Find your current location and explore the directory**
```bash
# Run pwd
pwd

# Run ls
ls 

# Run the ls help command, then find the option to let you
# display the directory contents as a list with more details
ls --help

# Then run that command
ls -la

```

## Making and Changing Directories (`mkdir` and `cd`)
Since the command line interface (CLI) can quickly become cluttered, we organize our work into directories. Let's create a simple directory structure.

- `mkdir`: Create new directories
- `cd`: Change directory
- Special directories: `.` (current), `..` (parent), `~` (home), `/` (root)

**Create and navigate a genomics project structure**
```bash
# Create a main directory
mkdir CLI_intro

# Navigate into it
cd CLI_intro

# Create additional directories within the main directory
# This can be done in multiple ways 
# For example, you could make multiple directories in one command:
mkdir Escherichia
cd Escherichia
mkdir coli hermanni fergusonii

# Check your structure
ls -la

# Navigate around and try the special directory short-hands
cd ~        # Go home
cd ..        # Go back to previous directory
```

---

# File Creation and Manipulation 

Now that we have an introduction to navigating our workspace, let's learn how to create and manage files. In bioinformatics, you'll constantly be creating, copying, moving, and organizing data files - from raw sequencing data to analysis results. While in a typical file explorer, you may drag and drop files as you please, in CLI, these operations require deliberate commands.

## Text manipulation (`echo`, `touch`)
Before we start with file manipulation, we'll first introduce text files the old school way via `echo` and `touch`

- `touch`: Create empty files
- `echo`: Print text provided in the prompts

**Handling text in CLI**
```bash
# First, lets use echo in the ye olde intro to programming way
echo "Hello World!"

# Not the most exciting, but we can use it to add text to files via > 
# Create a file using touch 
touch test_file

# Then add some text to the file 
echo "Some_text" > test_file

# Now add some more text to the next line in the file
# To add to a file you simply extend the > operator to >> 
echo "Some_more_text" >> test_file

# Now lastly, try to wipe the file with some new text 
echo "New_text" > test_file
```

## File Manipulation (`cp`, `mv`, `rm`)
Now let's create some mock files that we will use downstream in the analysis, and learn how to use commands to copy, rename and remove files

- `mv`: Rename the absolute path of a file (moving it)
- `cp`: Copy a file
- `rm`: Remove a file (Irreversible, be careful!!)

**Create sample files and practice file operations**
```bash
# Create some more directories to store everything in 
mkdir -p raw_data backups

# Create some empty mock files for different data types that we'll use later 
touch sequences.fasta
touch expression_data.csv
touch gene_annotations.csv

# Add some mock sequence data 
echo ">lacZ_beta-galactosidase" > sequences.fasta
echo "ATGACCATGATTACGCCAAGCT" >> sequences.fasta
echo ">rpoB_RNA_polymerase_beta" >> sequences.fasta
echo "ATGGTGACGACGACGACGATGCT" >> sequences.fasta
echo ">gyrA_DNA_gyrase_subunit_A" >> sequences.fasta
echo "ATGGCTGCTGATCGATCGATGCTA" >> sequences.fasta
echo ">ompA_outer_membrane_protein" >> sequences.fasta
echo "ATGCTGATCGATCGGCTAGCTAGC" >> sequences.fasta

# Add data to the gene annotation file 
echo "Gene_ID,Chromosome,Start,End,Strand,Product" > gene_annotations.csv
echo "lacZ,plasmid,1000,2500,+,beta-galactosidase" >> gene_annotations.csv
echo "rpoB,chr,3000,4200,+,RNA polymerase beta subunit" >> gene_annotations.csv
echo "gyrA,chr,500,1800,-,DNA gyrase subunit A" >> gene_annotations.csv
echo "ompA,chr,2000,3500,+,outer membrane protein A" >> gene_annotations.csv
echo "LacY,plasmid,5000,6200,+,Lactose_permease" >> gene_annotations.csv
echo "tolC,chr,100,800,+,outer membrane channel protein" >> gene_annotations.csv

# Add some gene expression data
echo "Gene_ID,Condition_A,Condition_B,Function" > expression_data.csv
echo "lacZ,150,200,beta-galactosidase" >> expression_data.csv
echo "rpoB,89,95,RNA_polymerase" >> expression_data.csv
echo "gyrA,175,180,DNA_gyrase" >> expression_data.csv
echo "LacY,165,210,Lactose_permease" >> expression_data.csv
echo "ompA,45,52,outer_membrane_protein" >> expression_data.csv

# Copy files (backup your data!)
cp sequences.fasta sequences_backup.fasta

# Move files to organize your project
mv sequences_backup.fasta backups/

# mv can also be used to rename files, similar to the syntax of cp 
# You just remembered that these files were E.coli, rename them and think of good informative names
mv raw_data/gene_annotation.csv raw_data/E_coli_gene_annotations.csv

# remove files (be careful, no undo!)
rm sequences_backup.fasta
# rm can also be used with flags to remove directories and their contents
rm -r backups/

# Lastly lets sort a bit in your directories
# Copy the entire raw_data directory with contents (find the right flag!)
cp -r raw_data/ Escherichia/coli/
```
**Note: After this section is done, remember that you renamed the data files to include the species name (E.coli), rename them back for the subsequent sections if you want. Otherwise, make sure the change doesnt confuse you**

---

# Viewing and Searching File Contents (`cat`, `head`, `tail`, `grep`)

One of the most powerful aspects of the command line is being able to quickly peek into files without opening them in a text editor. This is especially useful when working with large genomics files where you only need to see a portion of the content or search for specific patterns.

- `cat`: Display entire file contents
- `head`: Show first lines of a file  
- `tail`: Show last lines of a file
- `grep`: Search for patterns within files

Now let's work with file contents using some mock genomics data.

**Create sample genomics files and explore them**
```bash

# View entire files
cat sequences.fasta

# View only the first 2 sequences (headers + sequences)
head -n 4 sequences.fasta

# View the last 2 lines of expression data
tail -n 2 expression_data.csv

# Search for specific genes or functions
grep "lacZ" sequences.fasta
grep "^>" sequences.fasta  # Find all sequence headers

# Count how many sequences we have (find the counting flag!)
grep -c ">" sequences.fasta

# Search expression data case-insensitively (what flag makes it ignore case?)
grep -i "PROTEIN" expression_data.csv

# Show line numbers with matches (which flag shows line numbers?)
grep -n ">" sequences.fasta

# Find all lines that DON'T contain "lacZ", which rows are they on? 
# (which flag inverts the match? How do you combine flags?)
grep -v "lacZ" expression_data.csv
```

---

# sed: Stream Editor for Quick Text Edits
sed is a powerful command-line utility that allows us to perform basic text transformations on an input stream (a file or input from a pipeline). It is commonly used for tasks such as searching, find-and-replacing, inserting, or deleting text in files. It is especially useful for batch processing large files or automating repetitive text editing tasks (such as when there is a repetetive error in a large file that needs to be fixed).

  - `sed` (stream editor): Allows for edits of existing text and replacing/modifying it with new text 

**Use sed for find-and-replace operations**
```bash
# sed is most commonly used for find-and-replace operations
# The syntax is 's/old-text/new-text/g' where 's' stands for substitute and 'g' for global (all instances)
# Now run sed to replace all instances of 'old-text' with 'new-text'
echo "This is some old-text that needs to be replaced." > input_sed.txt
sed 's/old-text/new-text/g' input_sed.txt > output_sed.txt
cat output_sed.txt

# Note that sed does not modify the original file unless you use the -i flag (in-place)
sed -i 's/old-text/new-text/g' input_sed.txt
cat input_sed.txt

# It can also be used to delete lines containing a specific pattern
sed '/plasmid/d' gene_annotations.csv > chromosomal_only.csv
cat chromosomal_only.csv

```

---

# Putting it all together with pipes (`|`)

Here's where the command line really starts to shine! Pipes allow you to chain commands together, passing the output of one command as input to another. This creates powerful, flexible operations that can process data in more advanced ways with just a single line of code. It also saves us time by not having to run multiple executions before we get our desired output.

- `|`: Pipe - pass output from one command to another

Chaining commands together will be key later in this course section, when we start working on scripts. 

**Create files and use pipes for complex operations**
```bash
# Use pipes to filter and analyze data
cat gene_annotations.csv | grep "beta-galactosidase"

# Skip the header and show only first 2 data rows
cat gene_annotations.csv | grep -v "Gene_ID" | head -n 2

# Extract only chromosomal genes, count them
cat gene_annotations.csv | grep "chr" | wc -l

# We can combine commands to edit specific lines as well 
# Use it to remove all the underscores from the sequence headers in sequences.fasta
grep '^>' sequences.fasta | sed 's/_//g'

```
---

::: {.callout-note}
## Key Takeaways
- Organization matters, good directory structure keeps your files findable, we'll learn more about this in the next practical!
- Pipes are powerful, chain commands to create complex operations, making your work more efficient   
- Always check your work, use `ls`, `cat`, `head` to verify operations
- Be cautious with `rm`, no undo in command line!
:::

::: {.callout-tip}
## Tips for Bioinformatics CLI Work
- Use `Tab` for autocompletion
- Use `↑` arrow to recall previous commands  
- Use `Ctrl+C` to stop running commands
- Always backup important files before major operations
- Start directory names with numbers for quick autocomplete: `01_script.sh`, `02_analysis.sh`
:::

